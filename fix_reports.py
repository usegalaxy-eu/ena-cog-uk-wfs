import argparse
import csv
import os
import sys


if __name__ == '__main__':
    p = argparse.ArgumentParser(
        description='Helper script to convert variant reports generated by '
                    'Reporting WF versions < 0.2 to new format.'
    )
    p.add_argument(
        'input_folder',
        help='Folder with by-sample variant reports to process'
    )
    p.add_argument(
        '-A', '--af-field', default='AF',
        help='The name of the variant table column which contains AF'
    )
    p.add_argument(
        '-a', '--afcaller-field', default='AFcaller',
        help='The name of the variant table column which contains the '
             'original AF produced by the variant caller.'
    )
    p.add_argument(
        '-D', '--dp-field', default='DP',
        help='The name of the variant table column which contains the '
             'original AF produced by the variant caller.'
    )
    p.add_argument(
        '-C', '--dp4-field', default='DP4',
        help='The name of the variant table column which contains the '
             'original AF produced by the variant caller.'
    )

    args = p.parse_args()

    # read input by-sample variant reports from folder
    with os.scandir(args.input_folder) as files_it:
        for entry in files_it:
            if entry.is_file():
                with open(entry.path) as i:
                    hdr = i.readline().strip().split('\t')
                    try:
                        af_index = hdr.index(args.af_field)
                        dp4_index = hdr.index(args.dp4_field)
                        dp_index = hdr.index(args.dp_field)
                    except ValueError:
                        print(
                            'Not a tabular variant report:', entry.path,
                            file=sys.stderr
                        )
                        continue
                    if args.afcaller_field in hdr:
                        # already a new-style report, leave alone
                        continue
                    datalines = i.readlines()
                # upgrade old-style format
                hdr.append(args.afcaller_field)
                for n, line in enumerate(datalines):
                    fields = line.strip().split('\t')
                    dp = int(fields[dp_index])
                    if round(float(fields[af_index]) * dp) < 10:
                        # eleminate variants supported by
                        # too few good-quality bases
                        datalines[n] = None
                    fields.append(fields[af_index])
                    dp4 = [int(x) for x in fields[dp4_index].split(',')]
                    af_recalc = (dp4[2] + dp4[3]) / dp
                    fields[af_index] = format(float(af_recalc), 'g')
                    datalines[n] = '\t'.join(fields)
                # rewrite file
                with open(entry.path, 'w') as o:
                    print('\t'.join(hdr), file=o)
                    for line in datalines:
                        if line:
                            print(line, file=o)
